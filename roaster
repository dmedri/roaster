#!/usr/bin/env bash

########## don't change anything below this line ##########

# Roaster base settings
RRC=$(pwd)
RVE="$HOME/RVE"
RCO="$HOME/.roaster"
SRV="/opt/R"

# Logger settings
# values: "file", "systemd", "syslog"
LOG="file"

# Logger
function log {
	if [[ $LOG=="file" ]]; then
		echo "$(date +'%y/%d/%m-%H:%M:%S') $1" >> $RCO/logs/$$.build
	elif [[ $lOG=="systemd" ]]; then
		echo "$1" | systemd-cat -t roaster -p info	
	elif [[ $LOG=="syslog" ]]; then
		logger "roaster: $1"
	fi
}

# Create a new config file
function roaster-new-config {
	if [[ -f $RRC/data/tmpl.config ]]; then
		cat $RRC/data/tmpl.config > $RCO/config
	else
		echo "MIRROR=\"https://cloud.r-project.org\"" > $RCO/config
		echo "OPTSRV=\"\"" >> $RCO/config
		echo "OPTSTD=\"\"" >> $RCO/config
		echo "OPTRVE=\"\"" >> $RCO/config
	fi
}

# Check roaster working directories
function check-roaster-working-dirs {
	if [[ ! -d $RCO ]]; then
		mkdir -p $RCO/{src,logs,checks,infos}
		roaster-new-config
	fi

	function get-value {
		cat $RCO/config | grep "^$1" | awk -F '"' '{print $2}'
	}

	# Query available settings
	MIRROR=$(get-value MIRROR)
	OPTSRV=$(get-value OPTSRV)
	OPTSTD=$(get-value OPTSTD)
	OPTRVE=$(get-value OPTRVE)
}
check-roaster-working-dirs

# Roaster build settings
SRCU="$MIRROR/src/base/"
SRCF="R-latest.tar.gz"
SRCD="VERSION-INFO.dcf"
CRANM="CRAN_mirrors.csv"

# Header
function roaster-header {
	echo -e "\e[32mRoaster\e[0m - Check R updates and build sources."
	echo -e "Copyright 2019-2020 Daniele Medri - GNU LGPL 2.1+"
	echo -e "Use 'roaster --help' for the available options.\n"
}
roaster-header

# Checks for needed programs
function check-cmdreq {
	while(($#)); do
		command -v "$1"  >/dev/null 2>&1 \
		|| { echo >&2 "Command '$1' is required."; exit; }
		shift
	done
}
check-cmdreq {awk,cat,cut,tar,pwd,wget,grep,sudo}

# Check latest R release
function check-rstable-latest {
	VERLATEST=$(wget -O- -q $SRCU/$SRCD | awk '$1 == "Release:" {print $2}')
	if ! [[ $VERLATEST =~ ^[0-9]+(\.[0-9]+){2,3}$ ]] ; then
		echo "Problems with online resources. Please, try later." && exit
	else
		echo -e "Contacting online resources...\n"
	fi
}

# Create an updated mirrors file
function roaster-get-mirrors {
	if [[ -d $RCO/infos ]]; then
		wget -O- -q $MIRROR/$CRANM | awk -F "\"*,\"*" '{print $2,$4}' | sort | uniq > $RCO/infos/MIRRORS
		echo "File $RCO/infos/MIRRORS updated."
	fi
	while true; do
		read -p "Do you want to see its content? (y/n) " yn
		case $yn in
			[yY]* ) more $RCO/infos/MIRRORS; break;;
			[nN]* ) exit;;
			* ) echo "Please, answer y/n.";;
		esac
	done
}

# Check latest release
function check-status {
	echo "R - Check status"

	# Check online
	echo -e "\n\tSource code available online:\n"
	echo -e "\t\e[32m$VERLATEST\e[0m\t${SRCU}$SRCF"

	# Check for local R (standard)
	echo -e "\n\tLocal:\n"
	local checkr=$(command -v R)
	if [[ $checkr != "" && -e $checkr ]]; then
		verr=$(R --version | awk '$1=="R" && $2=="version" {print $3}')
		echo -e "\t\e[32m$verr\e[0m\t$checkr (standard)"
	else
		echo -e "\t\e[32m-----\e[0m\tNot available (standard)"
	fi

	# Check for an existing RVE
	local verr
	if [[ -f $RVE/bin/R ]]; then
		verr=$($RVE/bin/R --version | awk '$1=="R" && $2=="version" {print $3}')
		echo -e "\t\e[32m$verr\e[0m\t~/RVE/bin/R (virtualenv)"
	else
		echo -e "\t\e[32m-----\e[0m\tNot available (virtualenv)"
	fi

	# R server farm
	echo -e "\n\tServer farm:\n"
	local lsadir=$(ls -A $SRV 2>/dev/null)
	if [[ -n "$lsadir" ]]; then
		for i in $lsadir; do
			local srvr=$($SRV/$i/bin/R --version | awk '$1=="R" && $2=="version" {print $3}')
			echo -e "\t\e[32m$srvr\e[0m\t$SRV/$i/bin/R (server)";
		done
	else
		echo -e "\t\e[32m-----\e[0m\tNot available (server)"
	fi
	echo -e ""
}

# Autoclean option
function roaster-autoclean {
	if [[ -d $RCO ]]; then
		rm -fr $RCO/{src,checks,infos,logs}/*
	fi
}

# Factory reset
function roaster-factory-reset {
	if [[ -f $RCO/config ]]; then
		roaster-new-config
	fi
	roaster-autoclean
}

# Build init
function R-build-init {
	# Check OS infos and try to install dependencies
	function check-os-deps {
		local apt=$(command -v apt-get)
		local yum=$(command -v yum)
		local pac=$(command -v pacman)

		if [[ ! -f $RCO/checks/required-packages ]]; then
			if [[ -e $apt ]]; then
				LNX="Debian derivatives (Debian, Ubuntu, Kali)"
				echo -e "1) $LNX installing dependencies...\n"
				sudo apt-get build-dep r-base --yes --quiet \
				&& sudo apt-get install build-essential --yes --quiet \
				&& echo $(date) > $RCO/checks/required-packages
			elif [[ -e $yum  ]]; then
				LNX="Fedora derivatives (Fedora, SuSE, CentOs)"
				echo -e "1) $LNX installing dependencies...\n"
				sudo yum builddep R -y \
				&& sudo yum install make -y \
				&& echo $(date) > $RCO/checks/required-packages
			elif [[ -e $pac ]]; then
				LNX="Arch derivatives (Arch, Manjaro, Antergos)"
				echo -e "1) $LNX installing dependencies...\n"
				pacman -S expac --noconfirm \
				&& pacman -S gcc-fortran --noconfirm \
				&& pacman -S tk --noconfirm \
				&& pacman -S gsl --noconfirm \
				&& pacman -S nlopt --noconfirm \
				&& pacman -S texi2html --noconfirm \
				&& pacman -S base-devel --noconfirm \
				&& pacman -S $(expac -S "%E" r) --noconfirm \
				&& echo $(date) > $RCO/checks/required-packages
			else
				echo "1) Unknown Linux distribution."
				echo "Please, install by-yourself all the needed packages."
				exit;
			fi
		else
			echo "1) Dependencies satisfied."
		fi
	}

	# Check latest release and download it
	function download-latest-stable {
		cd $RCO/src
		if [[ ! -d "R-$VERLATEST" ]]; then
			if [[ -f $RCO/src/$SRCF ]]; then
				rm $SRCF
			fi
			wget $SRCU/$SRCF --quiet \
			&& log "downloaded $SRCU/$SRCF" \
			&& tar zxf $SRCF \
			&& log "decompressed $RCO/src/$SRCF" \
			echo -e "2) The source code is now available."
		else
			echo -e "2) The source code is already available."
		fi
	}

	check-os-deps
	download-latest-stable
}

# Option --build-virtualenv
function R-build-virtualenv {
	# Create virtualenv directory
	if [[ -d $RVE ]]; then
		echo -e "\e[32mThe directory RVE already exists.\e[0m"
		while true; do
			read -p "Backup the old directory and proceed? (y/n) " yn
			case $yn in
				[yY]* ) mv ~/RVE ~/RVE.backup-$(date +"%y%m%d%H%M"); break;;
				[nN]* ) echo "Okay, bye."; exit;;
				* ) echo "Please, answer (y/n).";;
			esac
		done
	fi
	# Add the main directory
	mkdir -p $RVE/workspace

	# build
	cd $RCO/src/R-$VERLATEST \
	&& log "build-virtualenv: configure" \
	&& ./configure \
		--prefix=$RVE \
		--exec-prefix=$RVE \
		--disable-rpath $OPTRVE \
		&& log "build-virtualenv: make" \
		&& make \
		&& make check \
		&& log "build-virtualenv: make install" \
		&& make install \
		&& log "build-virtualenv: make clean" \
		&& make clean \
		&& echo -e "\n\e[32mBuild done.\e[0m\n"

	# add RVE/.Rprofile
	if [[ -f $RRC/data/tmpl.Rprofile ]]; then
		cat $RRC/data/tmpl.Rprofile > $RVE/.Rprofile
	fi

	# add RVE/README
	if [[ -f $RRC/data/tmpl.README ]]; then
		cat $RRC/data/tmpl.README > $RVE/README
	fi
	
	# add RVE/bin/activate
	if [[ -f $RRC/data/tmpl.activate ]]; then
		echo -e "\e[32mR Virtual Environment\e[0m"
		cat $RRC/data/tmpl.activate > $RVE/bin/activate
		echo -e " enable: \$ source $RVE/bin/activate"
		echo -e "disable: \$ deactivate\n"
	fi
}

# Option --build-standard
function R-build-standard {
	# Build
	cd $RCO/src/R-$VERLATEST && log "build-standard: configure" \
	&& ./configure	$OPTSTD \
	&& log "build-standard: make" \
	&& make \
	&& make check
	echo -e "\n\e[32m--------------------------------------------\e[0m\n"
	log "build-standard: make install"
	while true; do
		read -p "Build done. Install now? (y/n) " yn
		case $yn in
			[yY]* ) sudo make install && log "build-standard: make clean" \
				&& make clean; break;;
			[nN]* ) echo -e "\nNotice: installation can proceed with 'make install'.\n"; exit;;
			* ) echo "Please, answer (y/n).";;
		esac
	done
	echo -e "\n\e[32m--------------------------------------------\e[0m\n"
	echo -e "\n\e[32mInstallation completed.\e[0m\n"
}

# Option --build-server
function R-build-server {
	if [[ ! -d $SRV/$VERLATEST ]]; then
		# Build
		cd $RCO/src/R-$VERLATEST && log "build-server: configure" \
		&& ./configure	\
			--prefix=$SRV/$VERLATEST \
			--exec-prefix=$SRV/$VERLATEST \
			$OPTSRV \
		&& log "build-server: make" \
		&& make \
		&& make check
		echo -e "\n\e[32m--------------------------------------------\e[0m\n"
		log "build-server: make install"
		sudo make install \
		&& log "build-server: make clean" \
		&& make clean
		echo -e "\n\e[32m--------------------------------------------\e[0m\n"
		echo -e "\n\e[32mInstallation completed.\e[0m\n"
	else
		echo -e "\e[32mDirectory $SRV/$VERLATEST already exists.\e[0m"
		echo -e "Please, remove it for a new build of that release."
	fi
}

# Show build options
function R-build-ask {
	echo -e "\nInstalling R \e[32m$VERLATEST\e[0m.\n"
	echo -e "Summary:"
	echo -e "\t$BTYPE"
	echo -e "\t$BOPTS\n"
	echo -e "Log type:"
	if [[ LOG=="file" ]]; then
		echo -e "\t$LOG $RCO/logs/$$.build\n"
	else
		echo -e "\t$LOG\n"
	fi
	while true; do
		read -p "Are you ready to start? (y/n) " yn
		case $yn in
			[yY]* ) echo -e "\n\e[32mOkay, let's go...\e[0m\n"; break;;
			[nN]* ) echo -e "\n\e[32mOkay, bye.\e[0m\n"; exit;;
			* ) echo "Please, answer (y/n).";;
		esac
	done
}

# Unsetting variables
function freemem {
	# unsetting vars
	unset MIRROR
	unset OPTSTD
	unset OPTRVE
	unset OPTSRV
	unset BTYPE
	unset BOPTS
	unset VERLATEST
	unset LNX
	unset RCC
	unset RCO
	unset RVE
}

# Roaster options
function app-options {
	echo -e "Informations:"
	echo -e "\t--check-status   \tCheck available R releases."
	echo -e "\t--get-mirrors    \tUpdate mirrors list."
	echo -e "Administration"
	echo -e "\t--autoclean      \tRemove unuseful files."    
	echo -e "\t--factory-reset  \tFactory reset."    
	echo -e "\nBuild latest R release:"
	echo -e "\t--build-server    \tConcurrent minimal versions in system."
	echo -e "\t--build-standard  \tCommon installation in system."
	echo -e "\t--build-virtualenv\tCreate a virtual environment."
	echo -e "\nBuild options (in \e[32m$RCO/config\e[0m):"
	echo -e "\t    mirror: $MIRROR"
	echo -e "\t    server: $OPTSRV"
	echo -e "\t  standard: $OPTSTD"
	echo -e "\tvirtualenv: $OPTRVE"
}

# Help menu
while [[ -n "$1" ]]; do
	case $1 in
	"--check-status")
		check-rstable-latest
		check-status
		;;
	"--get-mirrors")
		roaster-get-mirrors
		;;
	"--autoclean")
		roaster-autoclean
		echo "Auto-cleaning: done."
		;;
	"--factory-reset")
		roaster-factory-reset
		echo "Factory reset: done."
		;;
	"--build-server")
		check-rstable-latest
		BTYPE="Server (in system)"
		BOPTS="$OPTSRV"
		R-build-init
		R-build-ask
		R-build-server
		;;
	"--build-standard")
		check-rstable-latest
		BTYPE="Standard (in system)"
		BOPTS="$OPTSTD"
		R-build-init
		R-build-ask
		R-build-standard
		;;
	"--build-virtualenv")
		check-rstable-latest
		BTYPE="Virtual Environment (in userspace)"
		BOPTS="$OPTRVE"
		R-build-init
		R-build-ask
		R-build-virtualenv
		;;
	"--help")
		app-options
		;;
	esac
	shift
done
freemem
