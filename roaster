#!/usr/bin/env bash

########## don't change anything below this line ##########

# Roaster base settings
RVE="$HOME/RVE"
RCO="$HOME/.roaster"

# Setting to be used w/o ~/.roaster/config
if [[ ! -f $RCO/config ]]; then
	MIRROR="https://cloud.r-project.org"
	OPTSTD='--without-recommended-packages'
	OPTRVE='--without-recommended-packages'
else
	MIRROR=$(cat $RCO/config | grep ^MIRROR | awk -F '"' '{print $2}')
	OPTSTD=$(cat $RCO/config | grep ^OPTSTD | awk -F '"' '{print $2}')
	OPTRVE=$(cat $RCO/config | grep ^OPTRVE | awk -F '"' '{print $2}')
fi

# Roaster build settings
SRCU="$MIRROR/src/base/"
SRCF="R-latest.tar.gz"
SRCD="VERSION-INFO.dcf"
CRANM="CRAN_mirrors.csv"

# Header
echo -e "\e[32mRoaster\e[0m - Check R updates and build sources."
echo -e "Copyright 2019-2020 Daniele Medri - GNU LGPL 2.1+"
echo -e "Use 'roaster --help' for the available options.\n"

# checks for needed programs
command -v awk   >/dev/null 2>&1 || { echo >&2 "'awk'  (required)"; exit; }
command -v cat   >/dev/null 2>&1 || { echo >&2 "'cat'  (required)"; exit; }
command -v tar   >/dev/null 2>&1 || { echo >&2 "'tar'  (required)"; exit; }
command -v wget  >/dev/null 2>&1 || { echo >&2 "'wget' (required)"; exit; }
command -v grep  >/dev/null 2>&1 || { echo >&2 "'grep' (required)"; exit; }
command -v sudo  >/dev/null 2>&1 || { echo >&2 "'sudo' (required)"; exit; }

# Check Linux distribution
function check-os-info {
	DISTRO_OS=$(cat /etc/os-release| grep ^NAME= | awk -F'"' '{$0=$2}1')
}
check-os-info

# Check latest R release
function check-r-stable-latest {
	VERLATEST=$(wget -O- -q $SRCU/$SRCD | awk '$1 == "Release:" {print $2}')
}
check-r-stable-latest

# Create a new config file
function roaster-config-add {
	echo "Roaster: adding config file..."
	echo -e "MIRROR=\"$MIRROR\"\nOPTSTD=\"$OPTSTD\"\nOPTRVE=\"$OPTRVE\"" > $RCO/config
}

# Convert CRAN mirror .csv in text standard
function roaster-infos-mirrors-conv {
	if [[ -f $RCO/infos/$CRANM ]]; then
		echo -e "# $(date)\n" > $RCO/infos/MIRRORS && \
		cat $RCO/infos/$CRANM | awk -F "\"*,\"*" '{print $2,$4}' | sort | uniq >> $RCO/infos/MIRRORS
	else
		echo -e "Missed file."
	fi
}

# Create an updated mirrors file
function roaster-infos-mirrors-get {
	echo "Roaster: adding MIRRORS file..."
	wget -O- -q $MIRROR/$CRANM -O $RCO/infos/$CRANM && \
	roaster-infos-mirrors-conv
}

# Create rve.Profile for virtual environments
#function roaster-infos-rve-rprofile {
#	echo "Roaster: adding rve.RProfile..."
#	echo -e "options(repos=structure(c(CRAN=\"$MIRROR\")))" > $RCO/infos/rve.RProfile
#}

# Check roaster working directories
function check-roaster-working-dirs {
	if [[ ! -d $RCO ]]; then
		mkdir -p $RCO/{src,logs,checks,infos}
		roaster-config-add
		roaster-infos-mirrors-get
#		roaster-infos-rve-rprofile
	fi
}
check-roaster-working-dirs

# Check latest version
function check-status {
	echo -e "\nR:"

	# check online
	echo -e "\t\e[32m$VERLATEST\e[0m\tAvailable online"

	# Check for R local
	CHECKR=$(command -v R)
	if [[ $CHECKR != "" && -e $CHECKR ]]; then
		VERR=$(R --version | awk '$1=="R" && $2=="version" {print $3}')
		echo -e "\t\e[32m$VERR\e[0m\t(standard installation $CHECKR)"
	fi
	
	# Check for R Virtual Environment
	CHECKRVE=$(command -v RVE)
	if [[ $CHECKRVE != "" && -e $CHECKRVE ]]; then
		VERRVE=$(RVE --version | awk '$1=="R" && $2=="version" {print $3}')
		echo -e "\t\e[32m$VERRVE\e[0m\t(virtualenv $CHECKRVE)\n"
	elif [[ -f $RVE/bin/RVE ]]; then
		VERRVE=$($RVE/bin/RVE --version | awk '$1=="R" && $2=="version" {print $3}')
		echo -e "\t\e[32m$VERRVE\e[0m\t(virtualenv $RVE/bin not in PATH)\n"
	fi
}

# Build init
function R-build-init {
	# Checks and helpful tips about required packages
	function check-packages {
		if [[ "$DISTRO_OS"=="Debian GNU/Linux" ]]; then
			if [[ ! -f $RCO/checks/required-packages ]]; then
				echo -e "\n$DISTRO_OS"
				echo -e "Installing needed packages to build.\n"
				sudo apt-get build-dep r-base --yes --quiet
				sudo apt-get install build-essential --yes --quiet
				echo $(date) > $RCO/checks/required-packages
			else
				echo -e "Required packages already checked."
				echo -e "(remove $RCO/checks/required-packages to restore)\n"
			fi
		else
			echo -e "\nUnknown Linux distribution.\n"
		fi
	}

	# Check latest release and download it
	function download-latest-stable {
		cd $RCO/src
		if [[ ! -d "R-$VERLATEST" ]]; then
			if [[ -f $RCO/src/$SRCF ]]; then
				rm $SRCF
			fi
			wget $SRCU/$SRCF --quiet && tar zxvf $SRCF
		else
			echo -e "\nLatest R release already available."
			echo -e "(sources in $RCO/src/R-$VERLATEST)\n"
		fi
	}

	check-packages
	download-latest-stable
}

# Option --build-virtualenv
function R-build-virtualenv {
	# Create virtualenv directory
	if [[ ! -d $RVE ]]; then
		mkdir -p $RVE/workspace
	else
		echo -e "\e[32mThe directory ~/RVE already exist.\e[0m"
		while true; do
			read -p "Backup the old and go ahead with the new one? (y/n) " yn
			case $yn in
				[yY]* ) mv ~/RVE ~/RVE.backup-$(date +"%y%m%d-%H%M%S"); break;;
				[nN]* ) echo -e "Ok, bye."; exit;;
				* ) echo "Please, answer y/n.";;
			esac
		done
	fi

	cd $RCO/src/R-$VERLATEST && ./configure \
		--prefix=$RVE \
		--exec-prefix=$RVE \
		--disable-rpath $OPTRVE && make \
		&& make install \
		&& make clean
	if [[ -f $RVE/bin/R ]]; then
		mv $RVE/bin/R $RVE/bin/RVE
		export PATH="$PATH:$RVE/bin/"
	fi
#	echo -e "local({\n\toptions(prompt='(RVE)> ')\n})" > $RVE/.RProfile
	echo -e "\n\e[32mBuild done. Trying command 'RVE'...\e[0m"
	echo -e "(Please, add '$RVE/bin/' to your PATH)\n"
	cd $HOME && RVE
}

# Option --build-standard
function R-build-standard {
	cd $RCO/src/R-$VERLATEST && ./configure	$OPTSTD && make
	echo -e "\n\e[32m--------------------------------------------\e[0m\n"
	while true; do
		read -p "Build: 'make' done. Install now? (y/n) " yn
		case $yn in
			[yY]* ) sudo make install && make clean; break;;
			[nN]* ) echo -e "\nBrowse the code and 'sudo make install'.\n"; exit;;
			* ) echo "Please, answer y/n.";;
		esac
	done
	echo -e "\n\e[32m--------------------------------------------\e[0m\n"
	echo -e "\n\e[32mBuild: 'make install' done. Trying command 'R'...\e[0m\n"
	cd $HOME && R
}

# Show build options
function R-build-ask {
	echo -e "R:"
	echo -e "\t$VERLATEST"
	echo -e "Os:"
	echo -e "\t$DISTRO_OS"
	echo -e "Build:"
	echo -e "\t$BTYPE"
	echo -e "\t$BOPTS"
	echo -e "\n"
	while true; do
		read -p "Build: ready to go? (y/n) " yn
		case $yn in
			[yY]* ) echo "Ok, let's start..."; break;;
			[nN]* ) echo "Ok, bye."; exit;;
			* ) echo "Please, aswer y/n.";;
		esac
	done
}

# Help menu
while [[ -n "$1" ]]; do
	case "$1" in
	--check-status) echo "Check available R releases."
		check-status
		;;
	--build-standard) echo "Build R standard setup in system."
		BTYPE="standard (in system)"
		BOPTS="$OPTSTD"
		R-build-init
		R-build-ask
		R-build-standard
		;;
	--build-virtualenv) echo "Build R as virtual environment."
		BTYPE="virtual environment (in userspace)"
		BOPTS="$OPTRVE"
		R-build-init
		R-build-ask
		R-build-virtualenv
		;;
	*)
	 	echo -e "Informations:"
		echo -e "\t--check-status   \tCheck available R releases."
	 	echo -e "\nBuild latest R release:"
		echo -e "\t--build-standard  \tStandard setup, in system."
		echo -e "\t--build-virtualenv\tStandard setup, as virtual environment."
	 	echo -e "\nBuild options (hardcoded):"
		echo -e "\t    mirror: $MIRROR"
		echo -e "\t  standard: $OPTSTD"
		echo -e "\tvirtualenv: $OPTRVE"
	 	;;
	esac
	shift
done
